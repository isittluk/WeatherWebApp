{"version":3,"sources":["api/openWeather.js","api/geoCoding.js","components/HourlyDisplay.js","components/App.js","index.js"],"names":["axios","create","baseURL","headers","hourlyDisplay","props","className","time","temp","defaultProps","App","state","cLat","cLong","current","wthr","hour","hourList","city","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","error","message","openWeather","get","params","response","geoCoding","res","this","data","weather","hourly","results","locations","adminArea5","today","tempArr","map","item","Math","round","currentHour","Date","getHours","timeType","console","log","currentTime","dayOfMonth","Array","getDay","getDate","getMonth","getFullYear","description","feels_like","HourlyDisplay","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.884c01c0.chunk.js","sourcesContent":["// e541de3f4e331e4a73725943231b2729\r\n// pro.openweathermap.org/data/2.5/forecast/hourly?lat={lat}&lon={lon}&appid={your api key}\r\nimport axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://api.openweathermap.org/data/2.5/',\r\n    headers: {\r\n\r\n    }\r\n});","import axios from 'axios';\r\n\r\nconst API_KEY = 'nNOjZNFChNwbiphbxRDmG5GZLJjNq09S';\r\n\r\nexport default axios.create ({\r\n    baseURL: 'http://www.mapquestapi.com/geocoding/v1/reverse?',\r\n    headers: {\r\n        \r\n    }\r\n});","import React from 'react';\r\nimport '../views/weatherDisplay.css';\r\n\r\nconst hourConfig = {\r\n    time: \"time\",\r\n    iconName: \"\",\r\n    temp: 12\r\n};\r\n\r\nconst iconNames = {\r\n    daytime: [\r\n        \"wi-day-sunny\", \"wi-day-cloudy\", \"wi-day-cloudy-gusts\", \"wi-day-cloudy-windy\", \"wi-day-fog\", \"wi-day-hail\", \"wi-day-haze\", \"wi-day-lightning\", \"wi-day-rain\", \"wi-day-rain-mix\", \"wi-day-rain-wind\", \"wi-day-showers\", \"wi-day-sleet\", \"wi-day-sleet-storm\", \"wi-day-snow\", \"wi-day-snow-thunderstorm\", \"wi-day-snow-wind\", \"wi-day-sprinkle\", \"wi-day-storm-showers\", \"wi-day-sunny-overcast\", \"wi-day-thunderstorm\", \"wi-day-windy\", \"wi-day-light-wind\"\r\n    ],\r\n    neutral: [\r\n        \"wi-cloud\", \"wi-cloudy\", \"wi-cloudy-gusts\", \"wi-cloudy-windy\", \"wi-fog\", \"wi-hail\", \"wi-rain\", \"wi-rain-mix\", \"wi-rain-wind\", \"wi-showers\", \"wi-sleet\", \"wi-snow\", \"wi-sprinkle\", \"wi-storm-showers\", \"wi-thunderstorm\", \"wi-snow-wind\", \"wi-snow\"\r\n    ]\r\n};\r\n\r\nconst hourlyDisplay = (props) => {\r\n    const { time, iconName, temp } = hourConfig;\r\n    return(\r\n        <div className=\"hourly__hour\">\r\n            <p className=\"hourly__time\">{props.time}</p>\r\n            <i className=\"wi wi-day-cloudy icon__small\"></i>\r\n            <p className=\"hourly__temp\">{props.temp}°C</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nhourlyDisplay.defaultProps = {\r\n    time: \"time\",\r\n    temp: \"temp\"\r\n};\r\n\r\nexport default hourlyDisplay;","import React from 'react';\r\nimport openWeather from '../api/openWeather';\r\nimport geoCoding from '../api/geoCoding';\r\nimport '../views/weatherDisplay.css';\r\nimport HourlyDisplay from './HourlyDisplay';\r\n\r\nconst API_KEY = 'e541de3f4e331e4a73725943231b2729';\r\n\r\nclass App extends React.Component {\r\n    state = { \r\n        cLat: null, \r\n        cLong: null, \r\n        current: [], \r\n        wthr: [], \r\n        hour: [],\r\n        hourList: [],\r\n        city: '', \r\n        errorMessage: '' \r\n    };\r\n\r\n    async componentDidMount() {\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            position => this.setState({cLat: position.coords.latitude, cLong: position.coords.longitude}), error => this.setState({ errorMessage: error.message })\r\n        );\r\n\r\n        const response = await openWeather.get(`onecall?`, {\r\n            params: {\r\n                \"units\": \"metric\",\r\n                \"lat\": \"46.8\",\r\n                \"lon\": \"-117.2\",\r\n                \"appid\": \"e541de3f4e331e4a73725943231b2729\"\r\n            }\r\n        });\r\n\r\n        const res = await geoCoding.get('', {\r\n            params: {\r\n                \"key\": \"nNOjZNFChNwbiphbxRDmG5GZLJjNq09S\",\r\n                \"location\": \"46.8,-117.2\"\r\n            }\r\n        });\r\n\r\n        this.setState({ \r\n            current: response.data.current,\r\n            wthr: response.data.current.weather[0],\r\n            hour: response.data.hourly,\r\n            city: res.data.results[0].locations[0].adminArea5\r\n        });\r\n    }\r\n\r\n    renderContent() {\r\n        let today = null;\r\n        const arr = this.state.hour;\r\n        const tempArr = arr.map(function(item) {\r\n            return Math.round(item.temp)\r\n        });\r\n        let date = new Date();\r\n        let currentHour = date.getHours();\r\n        let timeType = '';\r\n        if (currentHour > 12) { \r\n            currentHour = currentHour - 12;\r\n            timeType = 'PM'; \r\n        } else { timeType = 'AM' };\r\n\r\n        console.log(this.state.current);\r\n        console.log(this.state.wthr);\r\n        console.log(this.state.hour);\r\n\r\n        console.log(tempArr);\r\n        console.log(this.state.city);\r\n        console.log(currentHour);\r\n\r\n\r\n\r\n        let currentTime = new Date(),\r\n            weekday = new Array('sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'staurday'),\r\n            dayOfWeek = weekday[currentTime.getDay()],\r\n            dayOfMonth = today + (currentTime.getDate() < 10)? '0' + currentTime.getDate() : currentTime.getDate(),\r\n            months = new Array('january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'),\r\n            currentMonth = months[currentTime.getMonth()],\r\n            currentYear = currentTime.getFullYear();\r\n        today = currentMonth + \" \" + dayOfMonth + \", \" + currentYear; \r\n\r\n        console.log(today);\r\n        return (\r\n            <div className=\"main\">\r\n                <div className=\"container\">\r\n                    <p className=\"date\">{today}</p>\r\n                    <h1>{this.state.city}</h1>\r\n                    <h3>{this.state.wthr.description}</h3>\r\n                    <i className=\"wi wi-day-sunny icon__big\"></i>\r\n                    <p className=\"temp\">{this.state.current.temp}°C</p>\r\n                    <p className=\"feelsLike\">Feels like {this.state.current.feels_like}°C</p>\r\n                    <p className=\"day\">\r\n                        <span className=\"day inactive\">Yesterday</span>\r\n                        <span className=\"day active\">Today</span>\r\n                        <span className=\"day inactive\">Tomorrow</span>\r\n                    </p>\r\n                    <div className=\"container__hourly\">\r\n                        <HourlyDisplay temp={tempArr[0]} time=\"Now\"/>\r\n                        <HourlyDisplay temp={tempArr[1]} time={currentHour + 1 + timeType}/>\r\n                        <HourlyDisplay temp={tempArr[2]} time={currentHour + 2 + timeType}/>\r\n                        <HourlyDisplay temp={tempArr[3]} time={currentHour + 3 + timeType}/>\r\n                        <HourlyDisplay temp={tempArr[4]} time={currentHour + 4 + timeType}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div>{this.renderContent()}</div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App/>, document.querySelector('#root'));"],"sourceRoot":""}